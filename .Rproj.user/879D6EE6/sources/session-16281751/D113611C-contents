# The Grammar of Graphics {#ggbasics}

## The `tidyverse` Package

Throughout this course, we will be using tidy data principles^[These principles are: a) each variable should have its own column, b) each observation should have its own row, and c) each value should have its own cell.] to create several types of visualizations. The main package we will use is the `tidyverse`, which includes several useful tools for data wrangling, analysis and visualization. The first step then is to install the package! You can do this from the packages vignette in *explorer pane* in RStudio, or by writing `install.packages("tidyverse")` into the *console pane*. 

Once the package has been installed, the next step will be to load the library so that we can start using it! Simply write the command below in a script the *editor pane* and click *run*, or directly in the *console pane* and press *enter*. 

```{r message=FALSE, warning=FALSE, paged.print=FALSE}
library(tidyverse)
```

After loading the `tidyverse` package from the library, we will get access to two very important functions which we will be using extensively. The first is the the command `ggplot()` which will allow us to make plots based on the *grammar of graphics*. The second is the *pipe operator* or ` %>% `, which translates loosely to the phrase "and then", and which we will use to put several commands and functions together in a pipeline.^[For Windows users, you can use the RStudio short cut `ctrl` + `shift` + `m` to write this pipe ` %>% ` operator.]

## The `ggplot2` Package

The `ggplot2` package is installed and loaded alongside the `tidyverse` package, though it can also be called on separately. This is a very powerful tool to make print-quality graphs and all sorts of visual outputs. To do this, it draws on *the grammar of graphics*, which is a concept developed by Leland Wilkinson [@wilkinson2005]. The main idea behind this complex book is that plots can be divided into several elements, each with a specific role to play. `ggplot2` has 7 such elements:

* **Data**
* **Aesthetics**
* **Layers**
* Scales
* Coordinates
* Facets
* Themes

Throughout this chapter, we will focus on the first three (**Data**, **Aesthetics**, **Layers**) which are the minimum requirements to make a basic plot. The element **data** tells R which vector(s) from your environment are going to be used to draw the plot. The **aesthetics** element determines which variable(s) will be used and in what capacity. The **layers** element tells R which type of geometry you wish to draw and in which order. 

```{r eval=FALSE}
df %>% 
  ggplot(aes(x=var1,y=var2))+
  geom_point()
```

In the example above, we are telling R that there is an object `df` in our environment which has at least two vectors (columns), one called `var1` and another `var2`. We are also telling it that we want `var1` to be our **x** axis and `var2` to be our **y** axis, we define this inside the `aes()` command either globally for the plot (i.e. inside the `ggplot()` command) or specifically for a layer (i.e. inside `geom_point()`). Finally, we are telling R that we want to make a scatter plot by defining the layer `geom_point()`. Notice that after the `ggplot()` command and until the end of the graph, we use a $+$ sign. 

## Example

To make our first `ggplot` plot, we will use the `mtcars` data set as an example.

```{r}
data("mtcars")
```

The cars data set has `r nrow(mtcars)` observations and `r ncol(mtcars)` variables. Once the data has been loaded, let's use the `pipe operator` to do some cleaning. In the code below, we are creating a new object called `df` - a common way of naming data frames - and filling it with the `mtcars` data with some modifications. We are asking R to a) take the `mtcars` data, b) *and then* ` %>% ` *select* four variables, c) *and then* ` %>% ` give them new name. This pipeline is saved into the new object `df`.

```{r}
df <- mtcars %>% 
  select(cyl, mpg, hp, am) %>% 
  rename(cylinders=cyl,
         mileage=mpg,
         horsepower=hp,
         transmission=am) 
```

With this `df` stored in our environment, we can start making plots. Let's begin with a histogram that shows the distribution of mileage across the `r nrow(df)` variables in our data set. For this we will use `geom_histogram`.

```{r hist-fig, fig.align='center', fig.asp=.75, fig.cap="A histogram with default settings", out.width='80%'}
df %>% #Our Data 
  ggplot(aes(x= mileage))+ #Our Aesthetics
  geom_histogram() #Our Layer
```
Figure \@ref(fig:hist-fig) shows us our very first **ggplot**, which shows the number of observations at each of the binned levels. From this plot we know that most cars in our data set do around 15 miles per gallon. However, it is not very nice looking! We can improve this by adding more parameters.

You might notice that below the code R is giving us a **warning**: `stat_bin() using bins = 30. Pick better value with binwidth.` Here the software is hinting that we might want to change the number of bars (`bins`) or their width (`binwidth`) in our plot to make it more informative.^[Most other software will give you a default based on some parameter such as the Freedman-Diaconis rule, `ggplot` does not do this, forcing you to experiment with different parameters that best reflect your data.] In figure \@ref(fig:hist2-fig) we change the number of bins to 5 inside our `geom_histogram` layer, and also declare the color of the column fill (darkgray) and the outline (black).

```{r hist2-fig, fig.align='center', fig.asp=.75, fig.cap="A nicer looking histogram", out.width='80%'}
df %>% 
  ggplot(aes(x= mileage))+ 
  geom_histogram(bins = 5, fill="darkgray", color="black") 
```

## Choosing the Right Plot

There are many `geoms` available in the `ggplot2` package and the many other packages that interact with it. The choice of which one to use largely depends on two questions: a) what are you trying to communicate?, and b) what type of variable(s) do you want to show?

```{r flow-fig, fig.align='center', fig.asp=.75, fig.cap="Some plot options based on variables types", out.width='80%', out.height='70%', echo=FALSE, message=FALSE, warning=FALSE}
DiagrammeR::grViz("digraph flowchart {
      
      #General Layout Parameters
      graph[overlap=T, 
      ranksep = 0.2]
      
      # Top Node
      node [fontname = Helvetica, shape = plaintext]
      q [label = 'What type of variable(s) are you working with?', fontsize = 25]

      # Variable Nodes
      node [fontname = Helvetica, shape = folder, style=filled, fillcolor=linen]    
      n [label = 'One Numeric \n Variable']
      c [label = 'One Categorical \n Variable']
      nn [label = 'Two Numeric \n Variables']
      cc [label = 'Two Categorical \n Variables']
      nc [label = 'One Numeric \n One Categorical']
      v3 [label = 'Three+ \n Variables']

      # Plot Nodes
      node [fontname = Helvetica, shape = cylinder, style=filled, fillcolor=khaki1]          
      hist [label = 'Histogram']
      dens [label = 'Density \n Plot']
      box [label = 'Boxplot']
      violin [label = 'Violin \n Plot']
      node [fontname = Helvetica, shape = cylinder, style=filled, fillcolor=snow3]
      bubble [label = 'Bubble \n Plot']
      line [label = 'Line \n Plot']
      node [fontname = Helvetica, shape = cylinder, style=filled, fillcolor=rosybrown2]
      bar [label = 'Bar \n Plot']
      tree [label = 'Tree \n Map']
      node [fontname = Helvetica, shape = cylinder, style=filled, fillcolor=skyblue2]
      point [label = 'Scatter \n Plot']
      area [label = 'Area \n Plot']

      # edge general parameters
      edge[minlen = 2]
      q -> n;
      q -> c;
      q -> nn;
      q -> cc;
      q -> nc;
      q -> v3;
      n -> hist;
      n -> dens;
      nc -> box;
      nc -> violin;
      c -> bar;
      c -> tree;
      cc -> tree;
      cc -> bar;
      nn -> point;
      nn -> line;
      v3 -> area;
      v3 -> point;
      v3 -> bubble;

      # rank of nodes for better display
      {rank = min; q}
      {rank = same; n; c}
      {rank = same; nn; cc; nc}
      }
      ", height =  250, width = 750) 
```

Figure \@ref(fig:flow-fig) shows some of the possible plot choices based on the type of variables that you are working with. This is by no means a comprehensive menu of plotting options. For more `geoms` and when to use them, check out [from Data to Viz](https://www.data-to-viz.com/#explore).
